string.length();Returns the number of CharT elements in the view. Parameters: NONE. Return value: he number of CharT elements in the view.
string.find();Finds the last substring equal to the given character sequence. Parameters: v-view to search for, pos-position at which to start the search, count-length of substring to search for, s-pointer to a character string to search for, ch-character to search for. Return value: position of the first character of the found substring or npos if no such substring is found.
string.c_str();Returns a pointer to a null-terminated character array with data equivalent to those stored in the string. The pointer is such that the range [c_str(); c_str() + size()] is valid and the values in it correspond to the values stored in the string with an additional null character after the last position. Parametr: NONE. Return value: pointer to the underlying character storage.
vector.size();Returns the number of elements in the container. Parameters: (none). Return value: the number of elements in the container.
vector.resize();Resizes the container to contain count elements. If the current size is greater than count, the container is reduced to its first count elements.Parameters: count-new size of the container, value-the value to initialize the new elements with. Return value: (none).
vector.push_back();Appends the given element value to the end of the container. Parameters: the value of the element to append. Return value: (none).
vector.clear();Erases all elements from the container. After this call, size() returns zero. Parameters: (none). Return value: (none).
clock();Returns the approximate processor time used by the process since the beginning of an implementation-defined era related to the program's execution. To convert result value to seconds divide it by CLOCKS_PER_SEC. Parameters: (none). Return value: processor time used by the program so far or (clock_t)(-1) if that information is unavailable or its value cannot be represented.
rand();Returns a pseudo-random integral value between ​0​ and RAND_MAX (0 and RAND_MAX included). Parameters: (none). Return value: pseudo-random integral value between ​0​ and RAND_MAX.
pow();Computes the value of base raised to the power exp or iexp. Parameters: base-base as a value of floating-point or integral type, exp-exponent as a value of floating-point or integral type, iexp-exponent as integer value. Return value: If no errors occur, base raised to the power of exp (or iexp) (baseexp), is returned.
sqrt();Computes the square root of arg. Parameters: arg-value of a floating-point or Integral type. Return value: square root of arg.
cbrt();Computes the cubic root of arg. Parameters: arg-value of a floating-point or Integral type. Return value: the cubic root of arg.
log();Computes the natural (base e) logarithm of arg. Parameters: arg-value of floating-point or Integral type. Return value: the natural (base-e) logarithm of arg.
log10();Computes the common (base-10) logarithm of arg. Parameters: arg-value of floating-point or Integral type. Return value: the common (base-10) logarithm of arg.
abs();Computes the absolute value of an integer number. Parameters: n-integer value. Return value: The absolute value of n.
acos();Computes the principal value of the arc cosine of arg. Parameters: arg-value of a floating-point or Integral type. Return value: the arc cosine of arg.
ceil();Computes the smallest integer value not less than arg. Parameters: arg-floating point value. Return value: the smallest integer value not less than arg.
atoi();Interprets an integer value in a byte string pointed to by str. Parameters: str-pointer to the null-terminated byte string to be interpreted. Return value: integer value corresponding to the contents of str on success. If the converted value falls out of range of corresponding return type, the return value is undefined. If no conversion can be performed, ​0​ is returned.
atof();Interprets a floating point value in a byte string pointed to by str. Parameters: str-pointer to the null-terminated byte string to be interpreted. Return value: double value corresponding to the contents of str on success. If the converted value falls out of range of the return type, the return value is undefined. If no conversion can be performed, 0.0 is returned.
stoi();Interprets a signed integer value in the string str. Parameters: str-the string to convert, pos-address of an integer to store the number of characters processed, base-the number base. Return value: the string converted to the specified signed integer type.
stof();Interprets a floating point value in a string str. Parameters: str-the string to convert, pos-address of an integer to store the number of characters processed. Return value: the string converted to the specified floating point type.
current_path();Returns the absolute path of the current working directory. Parameters: p-path to change the current working directory to. Return value: current working directory.
