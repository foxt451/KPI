#3. C++ Operators
-------------------------------------------------------------------
1. C++ Arithmetic Operators

Arithmetic operators are used to perform arithmetic operations on variables and data. 
For example: a + b;
Here, the + operator is used to add two variables a and b. 
Similarly there are various other arithmetic operators in C++.

Operator     |	Operation
-----------------------------------------------------------
+	     |	Addition
-	     |	Subtraction
*	     |	Multiplication
/	     |	Division
%	     |	Modulo Operation (Remainder after division)

Here, the operators +, - and * compute addition, subtraction, and multiplication respectively 
as we might have expected.

/ Division Operator

If an integer is divided by another integer, we will get the quotient. 
However, if either divisor or dividend is a floating-point number, we will get the result in decimals.

In C++,

7/2 is 3
7.0 / 2 is 3.5
7 / 2.0 is 3.5
7.0 / 2.0 is 3.5

% Modulo Operator

The modulo operator % computes the remainder. When a = 9 is divided by b = 4, the remainder is 1.

Note: The % operator can only be used with integers.

Increment and Decrement Operators
C++ also provides increment and decrement operators: ++ and -- respectively.

++ increases the value of the operand by 1
-- decreases it by 1
For example:
---------------------
int num = 5;
// increment operator
++num;  // 6
---------------------
Here, the code ++num; increases the value of num by 1.
---------------------------------------------------------------------------------
2. C++ Assignment Operators

In C++, assignment operators are used to assign values to variables. For example:

// assign 5 to a
a = 5;
Here, we have assigned a value of 5 to the variable a.

Operator    |	Example	   |	Equivalent to
-------------------------------------------------
=	    |	a = b;	   |	a = b;
+=	    |	a += b;	   |	a = a + b;
-=	    |	a -= b;	   |	a = a - b;
*=	    |	a *= b;	   |	a = a * b;
/=	    |	a /= b;	   |	a = a / b;
%=	    |	a %= b;	   |	a = a % b;
---------------------------------------------------------------------------------
3. C++ Relational Operators

A relational operator is used to check the relationship between two operands. For example,

// checks if a is greater than b
a > b;
Here, > is a relational operator. It checks if a is greater than b or not.

If the relation is true, it returns 1 whereas if the relation is false, it returns 0.

Operator	|	Meaning				Example
---------------------------------------------------------------------------------
==		|	Is Equal To		   |	3 == 5 gives us false
!=		|	Not Equal To		   |	3 != 5 gives us true
>		|	Greater Than		   |	3 > 5 gives us false
<		|	Less Than		   |	3 < 5 gives us true
>=		|	Greater Than or Equal To   |	3 >= 5 give us false
<=		|	Less Than or Equal To	   |	3 <= 5 gives us true
---------------------------------------------------------------------------------
4. C++ Logical Operators

Logical operators are used to check whether an expression is true or false. 
If the expression is true, it returns 1 whereas if the expression is false, it returns 0.

Operator     |	Example			     |	Meaning
------------------------------------------------------------
&&	     |	expression1 && expression2   |	Logical AND.
||	     |	expression1 || expression2   |	Logical OR.
!	     |	!expression		     |	Logical NOT.
------------------------------------------------------------
In C++, logical operators are commonly used in decision making. To further understand the logical operators, 
let's see the following examples:

Suppose:
a = 5
b = 8

Then:

(a > 3) && (b > 5) evaluates to true
(a > 3)  && (b < 5) evaluates to false

(a > 3) || (b > 5) evaluates to true
(a > 3) || (b < 5) evaluates to true
(a < 3) || (b < 5) evaluates to false

!(a < 3) evaluates to true
!(a > 3) evaluates to false

-------------------------------------------------------------------------------
5. C++ Bitwise Operators

In C++, bitwise operators are used to perform operations on individual bits. 
They can only be used alongside char and int data types.

Operator    |	Description
---------------------------------------
&	    |	Binary AND
|	    |	Binary OR
^	    |	Binary XOR
~	    |	Binary One's Complement
<<	    |	Binary Shift Left
>>	    |	Binary Shift Right
-------------------------------------------------------------------------------